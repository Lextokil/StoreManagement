# Use the official .NET 8 runtime as base image
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
WORKDIR /app
EXPOSE 8080
EXPOSE 8081

# Use the official .NET 8 SDK for building
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src

# Copy project files
COPY ["src/StoreManagement.API/StoreManagement.API.csproj", "src/StoreManagement.API/"]
COPY ["src/StoreManagement.Core/StoreManagement.Core.csproj", "src/StoreManagement.Core/"]
COPY ["src/StoreManagement.Infrastructure/StoreManagement.Infrastructure.csproj", "src/StoreManagement.Infrastructure/"]

# Restore dependencies
RUN dotnet restore "src/StoreManagement.API/StoreManagement.API.csproj"

# Copy all source code
COPY . .

# Build the application
WORKDIR "/src/src/StoreManagement.API"
RUN dotnet build "StoreManagement.API.csproj" -c $BUILD_CONFIGURATION -o /app/build

# Publish the application
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "StoreManagement.API.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# Final stage/image
FROM base AS final
WORKDIR /app

# Install curl for health checks
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Copy published application
COPY --from=publish /app/publish .

# Create a non-root user
RUN adduser --disabled-password --gecos '' appuser && chown -R appuser /app
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

ENTRYPOINT ["dotnet", "StoreManagement.API.dll"]
